apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "sda.fullname" . }}-orchestrator
  labels:
    role: orchestrator
    app: {{ template "sda.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: {{ .Release.Name }}-orchestrator
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  revisionHistoryLimit: {{ default "3" .Values.revisionHistory }}
  selector:
    matchLabels:
      app: {{ template "sda.name" . }}-orchestrator
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "sda.name" . }}-orchestrator
        role: orchestrator
        release: {{ .Release.Name }}
      annotations:
        {{- if not .Values.secretsService }}
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- end }}
{{- if .Values.podAnnotations }}
{{- toYaml .Values.podAnnotations | nindent 8 -}}
{{- end }}
    spec:
    {{- if .Values.rbacEnabled}}
      serviceAccountName: {{ .Release.Name }}
    {{- end }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
    {{- if .Values.pkiPermissions }}
      initContainers:
      - name: tls-init
        image: busybox
        command: ["/bin/sh", "-c"]
        args: ["/bin/cp /tls-certs/* /tls/ && chown 1000:1000 /tls/* && chmod 0400 /tls/*"]
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: tls-certs
          mountPath: /tls-certs
        - name: tls
          mountPath: /tls
    {{- end }}
      containers:
      - name: sda-orchestrate
        image: "{{ .Values.image.repository }}:{{ .Values.image.imageTag }}"
        imagePullPolicy: {{ .Values.image.imagePullPolicy | quote }}
        securityContext:
          allowPrivilegeEscalation: false
        env:
        - name: DEFAULT_LOG
          value: {{ .Values.LogLevel | quote }}
        - name: BROKER_PASSWORD
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-orchestrate
                key: mqPassword
        - name: BROKER_USER
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-orchestrate
                key: mqUser
        - name: DB_IN_PASSWORD
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-orchestrate
                key: dbInPass
        - name: DB_OUT_PASSWORD
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-orchestrate
                key: dbOutPass
        - name: DB_IN_USER
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-orchestrate
                key: dbInUser
        - name: DB_OUT_USER
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-orchestrate
                key: dbOutUser
        - name: DB_HOST
          value: {{ required "A valid DB host is required" .Values.db.host | quote }}
        - name: DB_DATABASE
          value: {{ default "lega" .Values.db.name | quote }}
        - name: DB_PORT
          value: {{ .Values.db.port | quote }}
        - name: DB_SSLMODE
          value: {{ .Values.db.sslMode | quote }}
        - name: BROKER_HOST
          value: {{ required "A valid MQ Host is required" .Values.broker.host | quote }}
        - name: BROKER_PORT
          value: {{ .Values.broker.port | quote }}
        - name: BROKER_VHOST
          value: {{ .Values.broker.vhost | quote }}
        - name: BRO KER_EXCHANGE
          value: {{ .Values.broker.exchange | quote }}
        - name: VERIFIED_QUEUE
          value: {{ .Values.broker.queue.verify | quote }}
        - name: COMPLETED_QUEUE
          value: {{ .Values.broker.queue.complete | quote }}
        - name: INBOX_QUEUE
          value: {{ .Values.broker.queue.inbox | quote }}
        {{- if .Values.sslmode.ssl }}
        - name: SSL_CACERT
          value: {{ include "tlsPath" . }}/ca.crt
        {{- if .Values.sslmode.verifyPeer }}
        - name: SSL_CLIENTCERT
          value: {{ include "tlsPath" . }}/orch.crt
        - name: SSL_CLIENTKEY
          value: {{ include "tlsPath" . }}/orch.key
        {{- end }}
      {{- end }}
        resources:
{{ toYaml .Values.resources | trim | indent 10 }}
        volumeMounts:
        {{- if not .Values.pkiService }}
        - name: tls
          mountPath: {{ template "tlsPath" . }}
        {{- end }}
        - name: tmp
          mountPath: "/tmp"
      volumes:
      - name: tmp
        emptyDir: {}
      - name: {{ ternary "tls" "tls-certs" (empty .Values.pkiPermissions) }}
        secret:
          defaultMode: 0440
          secretName: {{ template "sda.fullname" . }}-orchestrate-certs
      {{- if .Values.pkiPermissions }}
      - name: tls
        emptyDir:
          medium: Memory
          sizeLimit: 10Mi
      {{- end }}
